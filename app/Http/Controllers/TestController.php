<?php namespace App\Http\Controllers; use App\Http\Requests\ChangePasswordRequest; use App\Http\Requests\RegisterRequest; use App\Http\Requests\UpdateProfileRequest; use App\Http\Requests\UpdateUserRequest; use App\Models\Business; use App\Models\BussinessBalanceTransaction; use App\Models\CardNumber; use App\Models\FilePath; use App\Models\User; use App\Models\UserBalance; use App\Models\UserBalanceTransaction; use App\Models\Vehicle; use App\Services\Service; use Illuminate\Http\Request; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Storage; use Spatie\Permission\Models\Role; class UserController extends Controller { protected $service; public function __construct() { $this->service = new Service(Vehicle::class, FilePath::class, BussinessBalanceTransaction::class, UserBalanceTransaction::class); } public function createUserBalance($id) { UserBalance::create([ 'user_id' => $id, 'current_balance' => 0, 'old_balance' => 0 ]); } public function index() { $user = Auth::user(); $users = ''; if ($user->b_id) { $users = User::where('b_id', $user->b_id)->where('id', '!=', $user->id)->paginate(10); } else { $users = User::where('id', '!=', 1)->where('id', '!=', $user->id)->paginate(10); } foreach ($users as $user) { unset($user->b_id); $user['role'] = $user->getRoleNames(); $user_data = User::all(); foreach ($user_data as $data) { if ($user->created_by === $data->id) { $user->created_by = $data->name; } } } return response()->json($users); } }
// create user
  public function create(RegisterRequest $request) { 
    $userData = $request->all(); $role = str_replace(' ', '', $request->role); $userData = $request->except('password'); if ($request->has('photo')) { $related_path = $request->photo->store("userImage", 'public'); $userData['photo'] = $related_path; } $bUser = Auth::user(); if ($bUser->b_id) { $userData['b_id'] = $bUser->b_id; } $user = User::create([ ...$userData, 'password' => Hash::make($request->input('password')), ])->assignRole($role); if (!$bUser->b_id && $role == 'NormalUser') { $this->service->createCardNumber($user->id, false); $this->createUserBalance($user->id); } return response()->json(['message' => 'Business user created successfully!'], 200); } 
  // get user data 
  public function getUserData() { $user = Auth::user(); $role = $user->getRoleNames(); if ($user->b_id && ($role[0] === 'BussinessAdmin' || $role[0] === 'BussinessFinance')) { $business = Business::find($user->b_id); $business->cardNumber; $decrypt = $this->service->decrypt($business->cardNumber->card_number); $user['business_card_number'] = $decrypt; } if (!$user->b_id && $role[0] === 'NormalUser') { $card_number = CardNumber::where('user_id', $user->id)->first(); $decrypt = $this->service->decrypt($card_number->card_number); $user['business_card_number'] = $decrypt; } return response()->json($user); } public function edit($id) { $user = User::find($id); $roles = $user->getRoleNames(); $user['role'] = preg_replace('/(?<=[a-z])(?=[A-Z])/', ' ', $roles[0]); return response()->json($user); } // edit profile public function updateProfile(UpdateProfileRequest $request) { $data = $request->all(); $user = Auth::user(); $data = $request->except('role'); if ($request->has('photo')) { if ($user->photo && Storage::disk('public')->exists($user->photo)) { Storage::disk('public')->delete($user->photo); } $related_path = $request->photo->store("userImage", 'public'); $data['photo'] = $related_path; } $user->update([ ...$data ]); return response()->json(["user" => $user, 'message' => 'User updated successfully!']); } //update user public function update(UpdateUserRequest $request) { $data = $request->all(); $user = User::find($request->input('id')); if ($request->status) { $user->invalid_password = 0; $user->save(); } $data = $request->except('role'); if ($request->has('photo')) { if ($user->photo && Storage::disk('public')->exists($user->photo)) { Storage::disk('public')->delete($user->photo); } $related_path = $request->photo->store("userImage", 'public'); $data['photo'] = $related_path; } $roles = $user->getRoleNames(); foreach ($roles as $role) { $user->removeRole($role); } $user->update([ ...$data ]); $role = str_replace(' ', '', $request->role); $user->assignRole($role); return response()->json(["user" => $user, 'message' => 'User updated successfully!']); } public function changePassword(ChangePasswordRequest $request) { $user = Auth::user(); if (Hash::check($request->input("oldPassword"), $user->password)) { $user->update([ 'password' => Hash::make($request->input('password')), ]); return response()->json(['message' => 'User password changed successfully!']); } else { return response()->json(['errors' => ['oldPassword' => ['Old password is incorrect!']]], 422); } } public function delete($id) { $user = User::find($id); $imagePath = $user->photo; if ($imagePath && Storage::disk('public')->exists($imagePath)) { Storage::disk('public')->delete($imagePath); } $roles = $user->getRoleNames(); foreach ($roles as $role) { $user->removeRole($role); } $user->delete(); return response()->json(['message' => 'User deleted successfully!'], 200); } public function deleteSelectedUsers(Request $request) { $selectedUserIds = $request->input('selectedUsers'); // Retrieve the users and their associated images $users = User::whereIn('id', $selectedUserIds)->get(); // Delete the images and the users from the database foreach ($users as $user) { $imagePath = $user->photo; if ($imagePath && Storage::disk('public')->exists($imagePath)) { Storage::disk('public')->delete($imagePath); } $user->delete(); } return response()->json(['message' => 'Users deleted successfully']); } // role public function role() { $roles = Role::all(); foreach ($roles as $role) { $role['name'] = preg_replace('/(?<=[a-z])(?=[A-Z])/', ' ', $role['name']); } return response()->json($roles); } // search user public function searchUser(Request $request) { $query = $request->input; $user = Auth::user(); $role = $user->getRoleNames(); $results = ''; if ($role[0] == 'BussinessAdmin') { $results = User::where('b_id', $user->b_id)->where('id', '!=', $user->id) ->where(function ($queryBuilder) use ($query) { $queryBuilder->where('id', 'LIKE', "$query")->orWhere('name', 'LIKE', "%$query%")->orWhere('email', 'LIKE', "%$query%")->orWhere('phone', 'LIKE', "%$query%")->orWhere('address', 'LIKE', "%$query%"); }) ->paginate(10); } else { $results = User::where('id', 'LIKE', "$query")->orWhere('name', 'LIKE', "%$query%")->orWhere('email', 'LIKE', "%$query%")->orWhere('phone', 'LIKE', "%$query%")->orWhere('address', 'LIKE', "%$query%") ->paginate(10); } return response()->json($results); } // allUsers for user tab in dashboard public function allUsers() { $users = User::whereNull('b_id')->get(); $i = 0; $allUsers = []; foreach ($users as $user) { $userRole = $user->getRoleNames(); if ($userRole[0] == 'NormalUser') { $allUsers[$i] = $user; $i++; } } return response()->json($allUsers); } // get user info for user tab in dashboard public function userInfo($id) { $vehicles = Vehicle::where('user_id', $id)->get(); $balance = UserBalance::where('user_id', $id)->first(); $transactions = UserBalanceTransaction::where('user_b_id', $balance->id)->get(); $totalAmountIn = 0; $totalAmountOutByAdmin = 0; $totalAmountOutByPost = 0; foreach ($transactions as $transaction) { if ( $transaction->t_type == 'in' ) { $totalAmountIn += $transaction->balance; } if ($transaction->vehicle_id == 'Done by system' && $transaction->t_type == 'out') { $totalAmountOutByAdmin += $transaction->balance; } if ($transaction->vehicle_id != 'Done by system' && $transaction->t_type == 'out') { $totalAmountOutByPost += $transaction->balance; } } // vehicle $active = 0; $disActive = 0; $pending = 0; foreach ($vehicles as $vehicle) { if ($vehicle['status'] == 'Active') { $active += 1; } elseif ($vehicle['status'] == 'Disactive') { $disActive += 1; } else { $pending += 1; } } return response()->json(['active' => $active, 'disActive' => $disActive, 'pending' => $pending, 'totalAmountIn' => $totalAmountIn, 'totalAmountOutByAdmin' => $totalAmountOutByAdmin, 'totalAmountOutByPost' => $totalAmountOutByPost]); } }